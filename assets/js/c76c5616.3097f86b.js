"use strict";(self.webpackChunkscrypt_ts_docs=self.webpackChunkscrypt_ts_docs||[]).push([[0],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2546:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:2},i="How to Write a Contract",l={unversionedId:"getting-started/how-to-write-a-contract",id:"getting-started/how-to-write-a-contract",title:"How to Write a Contract",description:"A contract can be written as a class that extends the SmartContract base, a simple example could be like this:",source:"@site/docs/getting-started/how-to-write-a-contract.md",sourceDirName:"getting-started",slug:"/getting-started/how-to-write-a-contract",permalink:"/scrypt-ts-docs/getting-started/how-to-write-a-contract",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/scrypt-ts-docs/getting-started/installation"},next:{title:"How to Test a Contract",permalink:"/scrypt-ts-docs/getting-started/how-to-test-a-contract"}},s={},p=[{value:"Property Decorator: <code>@prop(state=false)</code>",id:"property-decorator-propstatefalse",level:2},{value:"Method Decorator: <code>@method</code>",id:"method-decorator-method",level:2},{value:"Types",id:"types",level:2},{value:"Statements",id:"statements",level:2},{value:"<code>for</code> statement",id:"for-statement",level:3},{value:"<code>console.log</code> statement",id:"consolelog-statement",level:3}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-write-a-contract"},"How to Write a Contract"),(0,r.kt)("p",null,"A contract can be written as a class that extends the ",(0,r.kt)("inlineCode",{parentName:"p"},"SmartContract")," base, a simple example could be like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { SmartContract, method, prop, assert } from "scrypt-ts";\n\nclass Demo extends SmartContract {\n  @prop()\n  x: bigint;\n\n  constructor(x: bigint) {\n    super(x);\n    this.x = x;\n  }\n\n  @method\n  public unlock(x: bigint) {\n    assert(this.add(this.x, 1n) === x);\n  }\n\n  @method\n  add(x0: bigint, x1:bigint) : bigint {\n    return x0 + x1;\n  }\n}\n')),(0,r.kt)("h2",{id:"property-decorator-propstatefalse"},"Property Decorator: ",(0,r.kt)("inlineCode",{parentName:"h2"},"@prop(state=false)")),(0,r.kt)("p",null,"Use this decorator on class properties to mark them as contract properties, which means the values would be stored on chain within ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.bitcoinsv.io/index.php/Bitcoin_Transactions"},"tx"),"."),(0,r.kt)("p",null,"This decorator can take a boolean parameter, which indicates whether it can be updated later. If it's ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", the property is so called a ",(0,r.kt)("inlineCode",{parentName:"p"},"stateful")," property and its value stored on chain can be updated between contract calls; otherwise, its value can not be changed since the contract deploy."),(0,r.kt)("h2",{id:"method-decorator-method"},"Method Decorator: ",(0,r.kt)("inlineCode",{parentName:"h2"},"@method")),(0,r.kt)("p",null,"Use this decorator on class methods to mark them as contract methods. The logic implemented in these methods would be serialized into ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.bitcoinsv.io/index.php/Bitcoin_Transactions"},"tx")," and be executed on chain."),(0,r.kt)("p",null,"The class methods decorated by ",(0,r.kt)("inlineCode",{parentName:"p"},"@method")," have some special requirements / restrains that should be followed:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Within these methods, only functions provided as built-ins from ",(0,r.kt)("inlineCode",{parentName:"p"},"scrypt-ts")," or methods also decorated by ",(0,r.kt)("inlineCode",{parentName:"p"},"@method")," can be called; Similarly, only the properties decorated by ",(0,r.kt)("inlineCode",{parentName:"p"},"@prop")," can be visited.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"With ",(0,r.kt)("inlineCode",{parentName:"p"},"public")," modifier, a method is marked as an entry method that could be called outside the contract class, especially during a tx building process. The main purpose of these methods is to validate / verify / check assertions for its input parameters according to its ",(0,r.kt)("inlineCode",{parentName:"p"},"@prop")," decorated properties. The return value must be ",(0,r.kt)("inlineCode",{parentName:"p"},"void"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Without a ",(0,r.kt)("inlineCode",{parentName:"p"},"public")," modifier, a method is kind of an inner function usually be called within the contract class. It can return any valid types described later."))),(0,r.kt)("h2",{id:"types"},"Types"),(0,r.kt)("p",null,"The types can be used in ",(0,r.kt)("inlineCode",{parentName:"p"},"@prop")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"@method")," are restricted to these kinds:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Basic types: ",(0,r.kt)("inlineCode",{parentName:"li"},"boolean")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"bigint")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"number"),";")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note"),": the type ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," is not allowed in ",(0,r.kt)("inlineCode",{parentName:"p"},"@prop")," because it may cause precision issues, and it's recommended to be used only in a few cases."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"User defined types which composed by the basic types at the end level, for example like:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type ST = {\n  x: bigint;\n}\n\ninterface ST1 {\n  x: ST;\n  y: string;\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Array types ",(0,r.kt)("strong",{parentName:"li"},"must")," be the built-in version of ",(0,r.kt)("inlineCode",{parentName:"li"},"FixedArray"),", which has a compile time constant declared as its length, for example like:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"let aaa: FixedArray<bigint, 3> = [1n, 3n, 3n];\n\n// 2d array\nlet abb: FixedArray<FixedArray<bigint, 2>, 3> = [[1n, 3n], [1n, 3n], [1n, 3n]];\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Other ",(0,r.kt)("inlineCode",{parentName:"li"},"SmartContract")," subclasses provided as libraries.")),(0,r.kt)("h2",{id:"statements"},"Statements"),(0,r.kt)("p",null,"There are also some other restraints / rules on the statemets that could be used within the ",(0,r.kt)("inlineCode",{parentName:"p"},"@method"),"s besides the previously mentioned."),(0,r.kt)("h3",{id:"for-statement"},(0,r.kt)("inlineCode",{parentName:"h3"},"for")," statement"),(0,r.kt)("p",null,"Because of the underlaying limitation of ",(0,r.kt)("inlineCode",{parentName:"p"},"loop")," implemetion on Bitcoin script, one can only use a compile time const number as the loop iterations."),(0,r.kt)("p",null,"So currently if you want to build a loop inside ",(0,r.kt)("inlineCode",{parentName:"p"},"@method"),"s, there is only one restricted version of ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," statement that could be used. It's looks like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"for(let $i = 0; $i < $constNum; $i++) {\n  ...\n}\n")),(0,r.kt)("p",null,"Note that the initial value ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"<")," operator and the post unary operator ",(0,r.kt)("inlineCode",{parentName:"p"},"++")," are all unchangeable."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"$i")," can be whatever you named the induction variable;")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"$constNum")," should be an expression of a CTC numberic value of the followings:"))),(0,r.kt)("p",null,"A number literal like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"for(let i = 0; i < 5; i++ ) ...\n")),(0,r.kt)("p",null,"Or a ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," variable name like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const N = 3;\nfor(let i = 0; i < N; i++ ) ...\n")),(0,r.kt)("p",null,"Or a ",(0,r.kt)("inlineCode",{parentName:"p"},"readonly")," property name like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class X {\nstatic readonly N = 3;\n}\nfor(let i = 0; i < X.N; i++ ) ...\n")),(0,r.kt)("h3",{id:"consolelog-statement"},(0,r.kt)("inlineCode",{parentName:"h3"},"console.log")," statement"),(0,r.kt)("p",null,"As descirbed before, all the javascript/typescript built-in functions / global variables are also not allowed to be used in ",(0,r.kt)("inlineCode",{parentName:"p"},"@method"),"s, but there are few exceptions."),(0,r.kt)("p",null,"One exceptional statement is ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log"),", which can be used to output logs for debugging purpose."))}d.isMDXComponent=!0}}]);