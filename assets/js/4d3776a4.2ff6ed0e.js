"use strict";(self.webpackChunkscrypt_ts_docs=self.webpackChunkscrypt_ts_docs||[]).push([[209],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),g=r,m=d["".concat(c,".").concat(g)]||d[g]||p[g]||a;return n?o.createElement(m,s(s({ref:t},u),{},{components:n})):o.createElement(m,s({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7501:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:4},s="How to Debug a Contract",i={unversionedId:"getting-started/how-to-debug-a-contract",id:"getting-started/how-to-debug-a-contract",title:"How to Debug a Contract",description:"In the process of writing contracts and testing contracts, it will not be successful once. Usually it is necessary to debug it.",source:"@site/docs/getting-started/how-to-debug-a-contract.md",sourceDirName:"getting-started",slug:"/getting-started/how-to-debug-a-contract",permalink:"/scrypt-ts-docs/getting-started/how-to-debug-a-contract",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"How to Test a Contract",permalink:"/scrypt-ts-docs/getting-started/how-to-test-a-contract"},next:{title:"How to Deploy & Call a Contract",permalink:"/scrypt-ts-docs/getting-started/how-to-deploy-and-call-a-contract"}},c={},l=[{value:"Use console.log()",id:"use-consolelog",level:2},{value:"Use debugging feature of Visual Studio Code",id:"use-debugging-feature-of-visual-studio-code",level:2}],u={toc:l};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-debug-a-contract"},"How to Debug a Contract"),(0,r.kt)("p",null,"In the process of writing contracts and testing contracts, it will not be successful once. Usually it is necessary to debug it."),(0,r.kt)("p",null,"As with debugging TypeScript, there are two ways to debug it:"),(0,r.kt)("h2",{id:"use-consolelog"},"Use console.log()"),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log")," to print the value of an expression:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export class Demo extends SmartContract {\n\n    @prop()\n    x: bigint;\n\n    @prop()\n    y: bigint;\n\n    constructor(x: bigint, y: bigint) {\n        super(x, y);\n        this.x = x;\n        this.y = y;\n    }\n\n    @method\n    sum(a: bigint, b: bigint): bigint {\n        return a + b;\n    }\n\n    @method\n    public add(z: bigint) {\n        console.log(`z: ${z}`) // print the value of z\n        console.log(`sum: ${this.x + this.y}`) // print the value of this.x + this.y\n        assert(z == this.sum(this.x, this.y));\n    }\n}\n\nDemo.compile().then(()=> {\n    let demo = new Demo(1n, 2n);\n    demo.add(3n);\n})\n")),(0,r.kt)("p",null,"Build and run with following CLI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run build && node ./dist/contracts/demo.js\n")),(0,r.kt)("p",null,"You will see the following output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"z: 3\nsum: 3\n")),(0,r.kt)("h2",{id:"use-debugging-feature-of-visual-studio-code"},"Use debugging feature of Visual Studio Code"),(0,r.kt)("p",null,"First make sure you have turned on the ",(0,r.kt)("inlineCode",{parentName:"p"},"sourceMap")," setting in your tsconfig:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "compilerOptions": {\n        "target": "es2021",\n        "module": "commonjs",\n        "outDir": "dist",\n        "sourceMap": true\n        ...\n    }\n}\n')),(0,r.kt)("p",null,"As with ",(0,r.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/typescript/typescript-debugging"},"debugging TypeScript programs"),", you need to create ",(0,r.kt)("inlineCode",{parentName:"p"},"launch.json"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "version": "0.2.0",\n    "configurations": [\n        {\n            "type": "node",\n            "request": "launch",\n            "name": "Launch demo",\n            "skipFiles": [\n                "<node_internals>/**",\n                "${workspaceFolder}/node_modules/**/*.js",\n            ],\n            "program": "${workspaceRoot}/contracts/demo.ts",\n            "preLaunchTask": "tsc: build - tsconfig.json",\n            "outFiles": ["${workspaceRoot}/dist/**/*.js"]\n        },\n        \n    ]\n}\n')),(0,r.kt)("p",null,"Now you can start setting breakpoints and press ",(0,r.kt)("strong",{parentName:"p"},"F5")," to start the debugger."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://github.com/sCrypt-Inc/image-hosting/blob/master/scrypt-ts-docs/debugging.gif?raw=true",alt:null})),(0,r.kt)("p",null,"If you want to debug a unit test written with ",(0,r.kt)("strong",{parentName:"p"},"mocha"),", use the following configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "node",\n    "request": "launch",\n    "name": "Launch mocha",\n    "skipFiles": [\n        "<node_internals>/**",\n        "${workspaceFolder}/node_modules/**/*.js",\n    ],\n    "program": "${workspaceRoot}/node_modules/.bin/_mocha",\n    "args": [\n        "${workspaceRoot}/dist/tests/**/*.js",\n        "--colors",\n        "-t",\n        "100000"\n    ],\n    "preLaunchTask": "tsc: build - tsconfig.json",\n    "outFiles": []\n}\n')))}p.isMDXComponent=!0}}]);