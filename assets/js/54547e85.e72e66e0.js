"use strict";(self.webpackChunkscrypt_ts_docs=self.webpackChunkscrypt_ts_docs||[]).push([[404],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=r.createContext({}),c=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=c(t.components);return r.createElement(s.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,s=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),d=c(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(h,i(i({ref:e},p),{},{components:n})):r.createElement(h,i({ref:e},p))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l.mdxType="string"==typeof t?t:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3170:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1},i="Tutorial 1: Hello World",l={unversionedId:"tutorials/hello-world",id:"tutorials/hello-world",title:"Tutorial 1: Hello World",description:"Overview",source:"@site/docs/tutorials/hello-world.md",sourceDirName:"tutorials",slug:"/tutorials/hello-world",permalink:"/scrypt-ts-docs/tutorials/hello-world",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tutorials",permalink:"/scrypt-ts-docs/category/tutorials"},next:{title:"Tutorial 2: How to test contract locally",permalink:"/scrypt-ts-docs/tutorials/how-to-test-contract"}},s={},c=[{value:"Overview",id:"overview",level:2},{value:"Setup",id:"setup",level:2},{value:"Create a new project",id:"create-a-new-project",level:2},{value:"Write the bitcoin Smart Contract",id:"write-the-bitcoin-smart-contract",level:2},{value:"Smart Contract Class",id:"smart-contract-class",level:2},{value:"Contract Properties",id:"contract-properties",level:3},{value:"Constructor",id:"constructor",level:3},{value:"User-Defined Functions",id:"user-defined-functions",level:3},{value:"Public Functions",id:"public-functions",level:3},{value:"Build",id:"build",level:2}],p={toc:c};function u(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tutorial-1-hello-world"},"Tutorial 1: Hello World"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"In this tutorial, we will code a smart contract step by step, from start to finish."),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,"First go ",(0,a.kt)("a",{parentName:"p",href:"/scrypt-ts-docs/overview"},"setup")," to install all dependencies."),(0,a.kt)("h2",{id:"create-a-new-project"},"Create a new project"),(0,a.kt)("p",null,"After all toolings installed, we can start building our application."),(0,a.kt)("p",null,"scrypt-ts is a Typescript framework to write smart contracts on Bitcoin SV. We use ",(0,a.kt)("em",{parentName:"p"},"npm")," to start a new TypeScript Project."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir scrypt-ts-hello-world\n")),(0,a.kt)("p",null,"Now change into your project directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd scrypt-ts-hello-world\n")),(0,a.kt)("p",null,"Set up a new npm project."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm init -y\n")),(0,a.kt)("p",null,"Install scrypt-ts:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i scrypt-ts@latest\n")),(0,a.kt)("p",null,"Create a ",(0,a.kt)("inlineCode",{parentName:"p"},"contracts")," directory to store contract source code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir contracts\n")),(0,a.kt)("p",null,"With TypeScript installed, you can initialize your TypeScript project by using the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npx tsc --init\n")),(0,a.kt)("p",null,"Update the ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," with following config:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    /* Language and Environment */\n    "target": "es2021", /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */\n    "lib": [\n      "es2021"\n    ], /* Specify a set of bundled library declaration files that describe the target runtime environment. */\n    "experimentalDecorators": true, /* Enable experimental support for TC39 stage 2 draft decorators. */\n    /* Modules */\n    "module": "commonjs", /* Specify what module code is generated. */\n    "rootDir": "./", /* Specify the root folder within your source files. */\n    "moduleResolution": "node", /* Specify how TypeScript looks up a file from a given module specifier. */\n    "outDir": "./dist", /* Specify an output folder for all emitted files. */\n    "esModuleInterop": true, /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables \'allowSyntheticDefaultImports\' for type compatibility. */\n    /* Type Checking */\n    /* "strict": true,                                       Enable all strict type-checking options. */\n    "skipLibCheck": true /* Skip type checking all .d.ts files. */,\n    "plugins": [\n      {\n        "transform": "scrypt-ts/dist/transformer",\n        "outDir": "./scrypts",\n        "transformProgram": true,\n        "debug": true\n      }\n    ]\n  },\n  "include": [\n    "contracts/**/*.ts"\n  ]\n}\n')),(0,a.kt)("h2",{id:"write-the-bitcoin-smart-contract"},"Write the bitcoin Smart Contract"),(0,a.kt)("p",null,"Now, the fun part! Let's write our bitcoin smart contract: ",(0,a.kt)("inlineCode",{parentName:"p"},"contracts/demo.ts"),". A final version of what we're writing can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/sCrypt-Inc/scrypt-ts-example/blob/master/contracts/demo.ts"},"here"),"."),(0,a.kt)("p",null,"First, open ",(0,a.kt)("inlineCode",{parentName:"p"},"contracts/demo.ts")," in your editor, then add the following at the top of the file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { method, prop, SmartContract, assert } from "scrypt-ts";\n')),(0,a.kt)("p",null,"What each of these are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"SmartContract"),": The class that creates bitcoin smart contracts.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"method"),": The decorator on class methods to mark them as contract methods. The logic implemented in these methods would be serialized into ",(0,a.kt)("a",{parentName:"p",href:"https://wiki.bitcoinsv.io/index.php/Bitcoin_Transactions"},"bitcoin transactions")," and be executed on chain.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"prop"),":  The decorator on class properties to mark them as contract properties, which means the values would be stored on chain within bitcoin transactions.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"assert"),": The function specifies terms/conditions of a contract. It consumes a boolean condition. If the condition is not met, the contract will abort execution and fail. Otherwise, the execution will resume."))),(0,a.kt)("h2",{id:"smart-contract-class"},"Smart Contract Class"),(0,a.kt)("p",null,"All bitcoin smart contracts should extends the ",(0,a.kt)("inlineCode",{parentName:"p"},"SmartContract")," class. Write the following in your file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export class Demo extends SmartContract {\n\n\n}\n")),(0,a.kt)("p",null,"This creates a new smart contract called ",(0,a.kt)("inlineCode",{parentName:"p"},"Demo"),"."),(0,a.kt)("h3",{id:"contract-properties"},"Contract Properties"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"@prop()")," decorator to add properties to contracts. Properties are templated parameters of the contract, which make the contract more general."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export class Demo extends SmartContract {\n\n  @prop()\n  x: bigint;\n\n  @prop()\n  y: bigint;\n}\n")),(0,a.kt)("p",null,"Their types are all ",(0,a.kt)("inlineCode",{parentName:"p"},"bigint"),". Only three primitive types are allowed by ",(0,a.kt)("inlineCode",{parentName:"p"},"@prop")," decorator\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"boolean")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"bigint")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"string"))),(0,a.kt)("p",null,"You can try to add other primitive types of properties, such as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@prop()\non: boolean;\n\n@prop()\nstr: string;\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Note"),": the type ",(0,a.kt)("inlineCode",{parentName:"p"},"number")," is not allowed in ",(0,a.kt)("inlineCode",{parentName:"p"},"@prop")," decorator."),(0,a.kt)("h3",{id:"constructor"},"Constructor"),(0,a.kt)("p",null,"Each contract has at most one constructor. It is where contract member variables are initialized. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export class Demo extends SmartContract {\n\n  @prop()\n  x: bigint;\n\n  @prop()\n  y: bigint;\n\n  constructor(x: bigint, y: bigint) {\n    super(x, y);\n    this.x = x;\n    this.y = y;\n  }\n\n}\n")),(0,a.kt)("p",null,"You must initialize the property in the constructor, it is not allowed to initialize when the property is declared."),(0,a.kt)("h3",{id:"user-defined-functions"},"User-Defined Functions"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"scrypt-ts")," enables developers to define their own functions."),(0,a.kt)("p",null,"Let's add a sum function to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Demo")," contract."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"\nexport class Demo extends SmartContract {\n\n  @prop()\n  x: bigint;\n\n  @prop()\n  y: bigint;\n\n  constructor(x: bigint, y: bigint) {\n    super(x, y);\n    this.x = x;\n    this.y = y;\n  }\n\n  @method\n  sum(a: bigint, b: bigint): bigint {\n      return a + b;\n  }\n}\n")),(0,a.kt)("h3",{id:"public-functions"},"Public Functions"),(0,a.kt)("p",null,"The public function is the interface for calling the contract externally. The main logic code contained in the function body can be regarded as a locking script; the function parameters can be regarded as the corresponding unlocking script. Miners actually verify the execution results of this combination."),(0,a.kt)("p",null,"Now we add an ",(0,a.kt)("inlineCode",{parentName:"p"},"add")," public function to the demo contract, which provides a verification function for the contract whether the input ",(0,a.kt)("inlineCode",{parentName:"p"},"z")," is the sum of two properties ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"y"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export class Demo extends SmartContract {\n\n    @prop()\n    x: bigint;\n\n    @prop()\n    y: bigint;\n\n    @method\n    sum(a: bigint, b: bigint): bigint {\n        return a + b;\n    }\n\n    @method\n    public add(z: bigint) {\n        assert(z == this.sum(this.x, this.y));\n    }\n\n}\n")),(0,a.kt)("p",null,"Each contract has at least one public function. Let's add another public function ",(0,a.kt)("inlineCode",{parentName:"p"},"sub")," to the Demo contract."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export class Demo extends SmartContract {\n\n    @prop()\n    x: bigint;\n\n    @prop()\n    y: bigint;\n\n    @method\n    sum(a: bigint, b: bigint): bigint {\n        return a + b;\n    }\n\n    @method\n    public add(z: bigint) {\n        assert(z == this.sum(this.x, this.y));\n    }\n\n    @method\n    public sub(z: bigint) {\n        assert(z == this.x - this.y);\n    }\n\n}\n")),(0,a.kt)("p",null,"Now we completes the ",(0,a.kt)("inlineCode",{parentName:"p"},"Demo")," smart contract!"),(0,a.kt)("h2",{id:"build"},"Build"),(0,a.kt)("p",null,"To compile the contract code into JavaScript with following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npx tsc\n")),(0,a.kt)("p",null,"or ",(0,a.kt)("inlineCode",{parentName:"p"},"npm run build")," if you have script as below declared in ",(0,a.kt)("em",{parentName:"p"},"package.json"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n "scripts": {\n   "build": "tsc"\n }\n}\n')),(0,a.kt)("p",null,"If succeeded, you wiil see:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$npx tsc                                                     \nactivate scrypt-ts transformer plugin\n...\ntranspiling errors []\n")),(0,a.kt)("p",null,"The tsc compiling process may output diagnostic informations in console about the contract class, update the source code if needed."),(0,a.kt)("h1",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"Congrats! We have finished building our first bitcoin smart contract with ",(0,a.kt)("strong",{parentName:"p"},"scrypt-ts"),"."),(0,a.kt)("p",null,"Checkout ",(0,a.kt)("a",{parentName:"p",href:"/scrypt-ts-docs/tutorials/how-to-test-contract"},"Tutorial 2")," to learn how to test contract."))}u.isMDXComponent=!0}}]);