"use strict";(self.webpackChunkscrypt_ts_docs=self.webpackChunkscrypt_ts_docs||[]).push([[382],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var i=r.createContext({}),l=function(t){var e=r.useContext(i),n=e;return t&&(n="function"==typeof t?t(e):c(c({},e),t)),n},p=function(t){var e=l(t.components);return r.createElement(i.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,i=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),d=l(n),m=o,h=d["".concat(i,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(h,c(c({ref:e},p),{},{components:n})):r.createElement(h,c({ref:e},p))}));function m(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,c=new Array(a);c[0]=d;var s={};for(var i in e)hasOwnProperty.call(e,i)&&(s[i]=e[i]);s.originalType=t,s.mdxType="string"==typeof t?t:o,c[1]=s;for(var l=2;l<a;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7459:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:2},c="Tutorial 2: How to test contract locally",s={unversionedId:"Tutorials/how-to-test-contract",id:"Tutorials/how-to-test-contract",title:"Tutorial 2: How to test contract locally",description:"After the contract code is written, the next step is to verify whether its function is implemented correctly.",source:"@site/docs/Tutorials/how-to-test-contract.md",sourceDirName:"Tutorials",slug:"/Tutorials/how-to-test-contract",permalink:"/scrypt-ts-docs/docs/Tutorials/how-to-test-contract",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Tutorials/how-to-test-contract.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Tutorial 1: Hello World",permalink:"/scrypt-ts-docs/docs/Tutorials/hello-world"},next:{title:"Tutorial 3: Stateful Contract",permalink:"/scrypt-ts-docs/docs/Tutorials/stateful-contract"}},i={},l=[{value:"Setup",id:"setup",level:2},{value:"Write test code",id:"write-test-code",level:2},{value:"Instantiate the contract",id:"instantiate-the-contract",level:2},{value:"Execute the contract",id:"execute-the-contract",level:2},{value:"Build and Run tests",id:"build-and-run-tests",level:2}],p={toc:l};function u(t){let{components:e,...n}=t;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"tutorial-2-how-to-test-contract-locally"},"Tutorial 2: How to test contract locally"),(0,o.kt)("p",null,"After the contract code is written, the next step is to verify whether its function is implemented correctly."),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("p",null,"Install test framework, We recommend using ",(0,o.kt)("a",{parentName:"p",href:"https://mochajs.org"},"mocha"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -D mocha chai @types/chai @types/mocha\n")),(0,o.kt)("p",null,"Create ",(0,o.kt)("inlineCode",{parentName:"p"},"tests\\demo.test.ts")," file with the editor."),(0,o.kt)("p",null,"Include test file in the ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "include": [\n    "contracts/**/*.ts",\n    "tests/**/*.ts"\n  ]\n}\n')),(0,o.kt)("h2",{id:"write-test-code"},"Write test code"),(0,o.kt)("p",null,"Testing the public function of Demo with the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { expect } from 'chai';\nimport { Demo } from '../contracts/demo';\n\ndescribe('Test SmartContract `Demo`', () => {\n\n  before(async () => {\n    await Demo.compile(); // compiling to get bitcoin script \n  })\n\n  it('should pass the public method unit test successfully.', async () => {\n    let demo = new Demo(1n, 2n);\n\n    let result = demo.verify(() => demo.add(3n));\n    expect(result.success, result.error).to.eq(true);\n\n    result = demo.verify(() => demo.sub(-1n));\n    expect(result.success, result.error).to.eq(true);\n\n  })\n})\n")),(0,o.kt)("p",null,"First we call ",(0,o.kt)("inlineCode",{parentName:"p"},"await Demo.compile()")," to get ",(0,o.kt)("a",{parentName:"p",href:"https://wiki.bitcoinsv.io/index.php/Script"},"bitcoin script"),",  which will be executed when you call ",(0,o.kt)("inlineCode",{parentName:"p"},"demo.verify()"),"."),(0,o.kt)("h2",{id:"instantiate-the-contract"},"Instantiate the contract"),(0,o.kt)("p",null,"Different from instantiating a normal TypeScript class, you must first compile the ",(0,o.kt)("inlineCode",{parentName:"p"},"Demo")," contract before instantiating the ",(0,o.kt)("inlineCode",{parentName:"p"},"Demo")," class."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"await Demo.compile(); // compiling to get bitcoin script \nlet demo = new Demo(1n, 2n);\n")),(0,o.kt)("h2",{id:"execute-the-contract"},"Execute the contract"),(0,o.kt)("p",null,"We call ",(0,o.kt)("inlineCode",{parentName:"p"},"verify()")," function to execute the contract, which is a function defined in the base class ",(0,o.kt)("a",{parentName:"p",href:"/scrypt-ts-docs/docs/References/classes/SmartContract#verify"},"SmartContract"),". You need to call the public function of the contract you want to test in the callback function of the ",(0,o.kt)("inlineCode",{parentName:"p"},"verify()")," function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"demo.verify(() => {\n    demo.add(3n);\n});\n")),(0,o.kt)("p",null,"If the contract is successfully executed, the return result ",(0,o.kt)("inlineCode",{parentName:"p"},"result.success")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),". Otherwise it will throw an exception."),(0,o.kt)("h2",{id:"build-and-run-tests"},"Build and Run tests"),(0,o.kt)("p",null,"Also apply the following command to compile the test:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm run build\n")),(0,o.kt)("p",null,"Use mocha to run tests:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx mocha ./dist/tests/demo.test.js\n")),(0,o.kt)("p",null,"Or just put it in the ",(0,o.kt)("em",{parentName:"p"},"package.json"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "scripts": {\n        "test": "mocha ./dist/tests/*.test.js"\n    }\n}\n')),(0,o.kt)("h1",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"Congrats! We have finished testing ",(0,o.kt)("inlineCode",{parentName:"p"},"Demo")," contract locally."),(0,o.kt)("p",null,"Checkout ",(0,o.kt)("a",{parentName:"p",href:"/scrypt-ts-docs/docs/Tutorials/stateful-contract"},"Tutorial 3")," to learn stateful contract."))}u.isMDXComponent=!0}}]);