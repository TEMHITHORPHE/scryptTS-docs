"use strict";(self.webpackChunkscrypt_ts_docs=self.webpackChunkscrypt_ts_docs||[]).push([[315],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>m});var o=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var c=o.createContext({}),i=function(t){var e=o.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},u=function(t){var e=i(t.components);return o.createElement(c.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},d=o.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,c=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),d=i(n),m=a,y=d["".concat(c,".").concat(m)]||d[m]||p[m]||r;return n?o.createElement(y,s(s({ref:e},u),{},{components:n})):o.createElement(y,s({ref:e},u))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,s=new Array(r);s[0]=d;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=t,l.mdxType="string"==typeof t?t:a,s[1]=l;for(var i=2;i<r;i++)s[i]=n[i];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8178:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>i});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_position:3},s="How to Test a Contract",l={unversionedId:"getting-started/how-to-test-a-contract",id:"getting-started/how-to-test-a-contract",title:"How to Test a Contract",description:"Before using your contract code in production, you should always test it carefully, especially because it may cause real economic losses if there were bugs or safety issues.",source:"@site/docs/getting-started/how-to-test-a-contract.md",sourceDirName:"getting-started",slug:"/getting-started/how-to-test-a-contract",permalink:"/scrypt-ts-docs/getting-started/how-to-test-a-contract",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"How to Write a Contract",permalink:"/scrypt-ts-docs/getting-started/how-to-write-a-contract"},next:{title:"How to Debug a Contract",permalink:"/scrypt-ts-docs/getting-started/how-to-debug-a-contract"}},c={},i=[{value:"Test a Contract locally",id:"test-a-contract-locally",level:2},{value:"Use <code>SmartContact.verify</code> method",id:"use-smartcontactverify-method",level:3},{value:"Integrate with testing framework",id:"integrate-with-testing-framework",level:3},{value:"Test a Contract on testnet",id:"test-a-contract-on-testnet",level:2}],u={toc:i};function p(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-to-test-a-contract"},"How to Test a Contract"),(0,a.kt)("p",null,"Before using your contract code in production, you should always test it carefully, especially because it may cause ",(0,a.kt)("strong",{parentName:"p"},"real economic losses")," if there were bugs or safety issues."),(0,a.kt)("p",null,"There are two different kinds of test recommended for every project using ",(0,a.kt)("inlineCode",{parentName:"p"},"scrypt-ts"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Local Testing")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Testnet Testing"))),(0,a.kt)("h2",{id:"test-a-contract-locally"},"Test a Contract locally"),(0,a.kt)("p",null,"The main purpose of local testing for a contract is to make sure its public/entry ",(0,a.kt)("inlineCode",{parentName:"p"},"@method"),"s will function as designed. That should be considered from two perspectives:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"If given the right parameters, a public/entry ",(0,a.kt)("inlineCode",{parentName:"li"},"@method")," call should always be successful."),(0,a.kt)("li",{parentName:"ol"},"If given any wrong parameters, a public/entry ",(0,a.kt)("inlineCode",{parentName:"li"},"@method")," call should never be successful.")),(0,a.kt)("h3",{id:"use-smartcontactverify-method"},"Use ",(0,a.kt)("inlineCode",{parentName:"h3"},"SmartContact.verify")," method"),(0,a.kt)("p",null,"The method is dedicated to test a contract call. The function signature is like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"instance.verify(entryMethodInvoking: (self: SmartContract) => void): VerifyResult\n")),(0,a.kt)("p",null,"Notice that it\u2019s actually a callback function named ",(0,a.kt)("inlineCode",{parentName:"p"},"entryMethodInvoking")," being passed to the call of ",(0,a.kt)("inlineCode",{parentName:"p"},"instance.verify"),". You should call the testing target method in this callback, like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"instance.verify(() => {\n   instance.entryMethod(...args);\n} )\n")),(0,a.kt)("p",null,"What it does underground is to transform the public function call to a pair of locking script and unlocking script, then execute the joint script on the Bitcoin Virtual Machine and return the result."),(0,a.kt)("h3",{id:"integrate-with-testing-framework"},"Integrate with testing framework"),(0,a.kt)("p",null,"You could use whatever testing framework you like to write unit tests for your contract, take ",(0,a.kt)("inlineCode",{parentName:"p"},"mocha")," for example, the local tests may look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"describe('Test SmartContract `Demo`', () => {\n before(async () => {\n   await Demo.compile();\n })\n \n it('should pass the public method unit test successfully.', async () => {\n   let demo = new Demo(1n);\n \n   let result = demo.verify(() => demo.unlock(2n));\n   expect(result.success, result.error).to.eq(true);\n \n   expect(() => {\n     demo.unlock(3n);\n   }).to.throw(/Execution failed/)\n })\n})\n")),(0,a.kt)("h2",{id:"test-a-contract-on-testnet"},"Test a Contract on testnet"),(0,a.kt)("p",null,"After passing local tests, you'd better test your contract on the ",(0,a.kt)("a",{parentName:"p",href:"https://test.whatsonchain.com/"},"testnet")," of Bitcoin SV. "),(0,a.kt)("p",null,"The main purpose of testing a contract on testnet is to make sure a contract instance can be successfully integrated with a transaction, and it functions as expected along with the deploy and call transactions."),(0,a.kt)("p",null,"In order to do so, you should meet these requirements:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Get a private key with some amount of BSV tokens on testnet. You could use our ",(0,a.kt)("a",{parentName:"li",href:"https://scrypt.io/#faucet"},"facuet")," to receive test coins."),(0,a.kt)("li",{parentName:"ul"},"Get an accessible Bitcoin SV testnet APIs for querying and sending transactions. You could use our ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/sCrypt-Inc/scrypt-ts-example/blob/master/txHelper.ts"},"tool functions")," in the ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/sCrypt-Inc/scrypt-ts-example"},"example project"),", or build your own.")),(0,a.kt)("p",null,"Then you could write some tests like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"describe('Test SmartContract `Demo`', () => {\n \n before(async () => {\n   await Demo.compile();\n })\n \n it('should be deployed and called successfully.', async () => {\n   const demo = new Demo(1n, 2n);\n   const balance = 1000;\n \n   // deploy\n   const unsignedDeployTx = await buildDeployTx(demo, balance, false);\n   const deployTx = await signAndSend(unsignedDeployTx);\n   console.log('contract deployed: ', deployTx.id)\n \n   //call\n   const { tx: unsignedCallTx } = buildCallTxAndNextInstance(\n     deployTx, demo,\n     (demoInst: Demo) => {\n       demoInst.add(3n);\n     }\n   );\n \n   const callTx = await signAndSend(unsignedCallTx);\n   console.log('contract called: ', callTx.id)\n })\n})\n")),(0,a.kt)("p",null,"You may visit ",(0,a.kt)("a",{parentName:"p",href:"/scrypt-ts-docs/getting-started/how-to-deploy-and-call-a-contract"},"here")," to see more details on contract deploy and call."))}p.isMDXComponent=!0}}]);