"use strict";(self.webpackChunkscrypt_ts_docs=self.webpackChunkscrypt_ts_docs||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(k,i(i({ref:t},c),{},{components:n})):a.createElement(k,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:1},i="Tutorial Intro",l={unversionedId:"intro",id:"intro",title:"Tutorial Intro",description:"Let's discover scrypt-ts in less than 5 minutes.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/scrypt-ts-docs/docs/intro",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"README",permalink:"/scrypt-ts-docs/docs/References/"}},s={},p=[{value:"Getting Started",id:"getting-started",level:2},{value:"1. Install <code>ts-patch</code>",id:"1-install-ts-patch",level:2},{value:"2. Update <code>package.json</code>",id:"2-update-packagejson",level:2},{value:"3. Update <code>tsconfig.json</code>",id:"3-update-tsconfigjson",level:2},{value:"4. Download sCrypt compiler",id:"4-download-scrypt-compiler",level:2},{value:"Write Contract",id:"write-contract",level:2},{value:"Decorator: <code>@prop(state=false)</code>",id:"decorator-propstatefalse",level:3},{value:"Decorator: <code>@method</code>",id:"decorator-method",level:3},{value:"Types",id:"types",level:3},{value:"Build",id:"build",level:2},{value:"Test",id:"test",level:2},{value:"Deploy and Call",id:"deploy-and-call",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"tutorial-intro"},"Tutorial Intro"),(0,o.kt)("p",null,"Let's discover ",(0,o.kt)("strong",{parentName:"p"},"scrypt-ts in less than 5 minutes"),"."),(0,o.kt)("h2",{id:"getting-started"},"Getting Started"),(0,o.kt)("p",null,"Get started by ",(0,o.kt)("strong",{parentName:"p"},"creating a hello world contract"),"."),(0,o.kt)("h1",{id:"scrypt-ts"},"scrypt-ts"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"scrypt-ts")," is a Typescript framework to write smart contracts on Bitcoin SV."),(0,o.kt)("h1",{id:"installation"},"Installation"),(0,o.kt)("p",null,"Use this command to install ",(0,o.kt)("inlineCode",{parentName:"p"},"scrypt-ts")," to your project:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"npm install -S scrypt-ts")),(0,o.kt)("h1",{id:"setup"},"Setup"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"scrypt-ts")," depends on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nonara/ts-patch"},"ts-patch")," to provide a custom plugin support for typescript. So ",(0,o.kt)("inlineCode",{parentName:"p"},"ts-patch")," should be installed and prepared first."),(0,o.kt)("h2",{id:"1-install-ts-patch"},"1. Install ",(0,o.kt)("inlineCode",{parentName:"h2"},"ts-patch")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"npm install -D ts-patch")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"ts-patch")," currently has an issue with typescript version ",(0,o.kt)("inlineCode",{parentName:"p"},"4.9.x"),", so make sure to use the version ",(0,o.kt)("inlineCode",{parentName:"p"},"4.8.4"),"."),(0,o.kt)("h2",{id:"2-update-packagejson"},"2. Update ",(0,o.kt)("inlineCode",{parentName:"h2"},"package.json")),(0,o.kt)("p",null,"Add prepare script (keeps patch persisted after npm install):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n /* ... */\n "scripts": {\n   "prepare": "ts-patch install -s"\n }\n}\n')),(0,o.kt)("h2",{id:"3-update-tsconfigjson"},"3. Update ",(0,o.kt)("inlineCode",{parentName:"h2"},"tsconfig.json")),(0,o.kt)("p",null,"Add ",(0,o.kt)("inlineCode",{parentName:"p"},"scrypt-ts")," plugin and enable decorators:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    ...\n    "experimentalDecorators": true,\n    "plugins": [\n      {\n        "transform": "scrypt-ts/dist/transformer",   // Required\n        "transformProgram": true,                    // Required\n        "outDir": "./scrypt",                        // Optional, define the auto-generated `.scrypt` files folder\n        "debug": false                               // Optional, enable/disable debug log in console.\n      }\n    ]\n  }\n}\n')),(0,o.kt)("h2",{id:"4-download-scrypt-compiler"},"4. Download sCrypt compiler"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"scrypt-ts")," also depends on the native sCrypt compiler which could be downloaded with command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"curl -Ls https://scrypt.io/setup | sh -s --\n")),(0,o.kt)("p",null,"That's all, you're ready to go!"),(0,o.kt)("h1",{id:"usage"},"Usage"),(0,o.kt)("h2",{id:"write-contract"},"Write Contract"),(0,o.kt)("p",null,"A contract can be written as a class that extends the ",(0,o.kt)("inlineCode",{parentName:"p"},"SmartContract")," base, a simple example could be like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { SmartContract, method, prop, assert } from "scrypt-ts";\n\nclass Demo extends SmartContract {\n  @prop()\n  x: bigint;\n\n  constructor(x: bigint) {\n    super(x);\n    this.x = x;\n  }\n\n  @method\n  public unlock(x: bigint) {\n    assert(this.add(this.x, 1n) === x);\n  }\n\n  @method\n  add(x0: bigint, x1:bigint) : bigint {\n    return x0 + x1;\n  }\n}\n')),(0,o.kt)("h3",{id:"decorator-propstatefalse"},"Decorator: ",(0,o.kt)("inlineCode",{parentName:"h3"},"@prop(state=false)")),(0,o.kt)("p",null,"Use this decorator on class properties to mark them as contract properties, which means the values would be stored on chain within ",(0,o.kt)("a",{parentName:"p",href:"https://wiki.bitcoinsv.io/index.php/Bitcoin_Transactions"},"tx"),"."),(0,o.kt)("p",null,"This decorator can take a boolean parameter, which indicates whether it can be updated later. If it's ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", the property is so called a ",(0,o.kt)("inlineCode",{parentName:"p"},"stateful")," property and its value stored on chain can be updated between contract calls; otherwise, its value can not be changed since the contract deploy."),(0,o.kt)("h3",{id:"decorator-method"},"Decorator: ",(0,o.kt)("inlineCode",{parentName:"h3"},"@method")),(0,o.kt)("p",null,"Use this decorator on class methods to mark them as contract methods. The logic implemented in these methods would be serialized into ",(0,o.kt)("a",{parentName:"p",href:"https://wiki.bitcoinsv.io/index.php/Bitcoin_Transactions"},"tx")," and be executed on chain."),(0,o.kt)("p",null,"The class methods decorated by ",(0,o.kt)("inlineCode",{parentName:"p"},"@method")," have some special requirements / restrains that should be followed:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Within these methods, only functions provided as built-ins from ",(0,o.kt)("inlineCode",{parentName:"p"},"scrypt-ts")," or methods also decorated by ",(0,o.kt)("inlineCode",{parentName:"p"},"@method")," can be called; Similarly, only the properties decorated by ",(0,o.kt)("inlineCode",{parentName:"p"},"@prop")," can be visited.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"With ",(0,o.kt)("inlineCode",{parentName:"p"},"public")," modifier, a method is marked as an entry method that could be called outside the contract class, especially during a tx building process. The main purpose of these methods is to validate / verify / check assertions for its input parameters according to its ",(0,o.kt)("inlineCode",{parentName:"p"},"@prop")," decorated properties. The return value must be ",(0,o.kt)("inlineCode",{parentName:"p"},"void"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Without a ",(0,o.kt)("inlineCode",{parentName:"p"},"public")," modifier, a method is kind of an inner function usually be called within the contract class. It can return any valid types described later."))),(0,o.kt)("h3",{id:"types"},"Types"),(0,o.kt)("p",null,"The types can be used in ",(0,o.kt)("inlineCode",{parentName:"p"},"@prop")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"@method")," are restricted to these kinds:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Basic types: ",(0,o.kt)("inlineCode",{parentName:"li"},"boolean")," / ",(0,o.kt)("inlineCode",{parentName:"li"},"string")," / ",(0,o.kt)("inlineCode",{parentName:"li"},"bigint"),";")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Note"),": the type ",(0,o.kt)("inlineCode",{parentName:"p"},"number")," is not allowed in ",(0,o.kt)("inlineCode",{parentName:"p"},"@prop")," because it may cause precision issues, and it's recommended to be used only in a few cases."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Types composed by the basic types at the end level, for example like:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type ST = {\n  x: bigint;\n}\n\ninterface ST1 {\n  x: ST;\n  y: string;\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Other ",(0,o.kt)("inlineCode",{parentName:"li"},"SmartContract")," subclasses provided as libraries.")),(0,o.kt)("h2",{id:"build"},"Build"),(0,o.kt)("p",null,"Just run ",(0,o.kt)("inlineCode",{parentName:"p"},"npx tsc"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"npm run build")," if you have script as below declared in ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n "scripts": {\n   "build": "tsc"\n }\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"tsc")," compiling process may output diagnostic informations in console about the contract class, update the source code if needed."),(0,o.kt)("h2",{id:"test"},"Test"),(0,o.kt)("p",null,"You could write tests using tools like ",(0,o.kt)("inlineCode",{parentName:"p"},"mocha"),", for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"describe('Test SmartContract `Demo`', () => {\n  before(async () => {\n    await Demo.compile();\n  })\n\n  it('should pass the public method unit test successfully.', async () => {\n    let demo = new Demo(1n);\n\n    let result = demo.verify(() => demo.unlock(2n));\n    expect(result.success, result.error).to.eq(true);\n\n    expect(() => {\n      demo.unlock(3n);\n    }).to.throw(/Execution failed/)\n  })\n})\n")),(0,o.kt)("h2",{id:"deploy-and-call"},"Deploy and Call"),(0,o.kt)("p",null,"Generally speaking, if you want to deploy or call the contract to BSV network, it takes three steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Build contract instance: ")),(0,o.kt)("p",null,"Giving proper parameters to get an up-to-date contract instance."),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Build tx: ")),(0,o.kt)("p",null,"Build a tx corresponding to your business logic, especially to set the tx's proper input & output script with contract instance."),(0,o.kt)("p",null,"For example, to get the locking script, use code like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"instance.lockingScript;\n")),(0,o.kt)("p",null,"To get the unlocking script for a certain ",(0,o.kt)("inlineCode",{parentName:"p"},"entryMethod"),", use code like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"instance.getUnlockingScript(() => {\n  intance.entryMethod(...);\n})\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Send tx:")),(0,o.kt)("p",null,"The final step is to sign and send the tx to the network."),(0,o.kt)("p",null,"Here is an example code to deploy & call a ",(0,o.kt)("inlineCode",{parentName:"p"},"Demo")," contract."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"await Demo.compile();\n// build contract instance\nconst demo = new Demo(2n);\nconst balance = 1000;\n\n// build contract deploy tx\nconst utxos = await fetchUtxos();\nconst unsignedDeployTx =\n  new bsv.Transaction()\n    .from(utxos)\n    .addOutput(new bsv.Transaction.Output({\n      // get the locking script for `demo` instance\n      script: demo.lockingScript, \n      satoshis: balance,\n    }));\n\n// send contract deploy tx\nconst deployTx = await signAndSend(unsignedDeployTx);\nconsole.log('contract deployed: ', deployTx.id)\n\n// build contract call tx\nconst unsignedCallTx =\n  new bsv.Transaction()\n    .addInput(new bsv.Transaction.Input({\n      prevTxId: deployTx.id,\n      outputIndex: outputIdx,\n      script: demo.getUnlockingScript(() => {\n        // call public method to get the unlocking script for `demo` instance.\n        demo.unlock(3n);\n      }),\n      output: deployTx.outputs[outputIdx]\n    }))\n    .addOutput(\n      new bsv.Transaction.Output({\n        script: bsv.Script.buildPublicKeyHashOut(publicKey.toAddress()),\n        satoshis: balance / 2\n      })\n    );\n\n// send contract call tx\nconst callTx = await signAndSend(unsignedCallTx);\nconsole.log('contract called: ', callTx.id)\n")),(0,o.kt)("h1",{id:"documentation"},"Documentation"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"scrypt-ts")," documentation is available ",(0,o.kt)("a",{parentName:"p",href:"/scrypt-ts-docs/docs/References/"},"here"),"."))}d.isMDXComponent=!0}}]);