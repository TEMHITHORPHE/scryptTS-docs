"use strict";(self.webpackChunkscrypt_ts_docs=self.webpackChunkscrypt_ts_docs||[]).push([[315],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>m});var o=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,o,r=function(t,e){if(null==t)return{};var n,o,r={},a=Object.keys(t);for(o=0;o<a.length;o++)n=a[o],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(o=0;o<a.length;o++)n=a[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var l=o.createContext({}),i=function(t){var e=o.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},u=function(t){var e=i(t.components);return o.createElement(l.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},d=o.forwardRef((function(t,e){var n=t.components,r=t.mdxType,a=t.originalType,l=t.parentName,u=c(t,["components","mdxType","originalType","parentName"]),d=i(n),m=r,y=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return n?o.createElement(y,s(s({ref:e},u),{},{components:n})):o.createElement(y,s({ref:e},u))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var a=n.length,s=new Array(a);s[0]=d;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=t,c.mdxType="string"==typeof t?t:r,s[1]=c;for(var i=2;i<a;i++)s[i]=n[i];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8178:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>i});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:3},s="How to Test a Contract",c={unversionedId:"getting-started/how-to-test-a-contract",id:"getting-started/how-to-test-a-contract",title:"How to Test a Contract",description:"Before using your contract code in production, you should always test it carefully, especially because it may cause real economic losses if there were bugs or safety issues.",source:"@site/docs/getting-started/how-to-test-a-contract.md",sourceDirName:"getting-started",slug:"/getting-started/how-to-test-a-contract",permalink:"/scrypt-ts-docs/getting-started/how-to-test-a-contract",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"How to Write a Contract",permalink:"/scrypt-ts-docs/getting-started/how-to-write-a-contract"},next:{title:"How to Debug a Contract",permalink:"/scrypt-ts-docs/getting-started/how-to-debug-a-contract"}},l={},i=[{value:"Test a Contract locally",id:"test-a-contract-locally",level:2},{value:"Use <code>SmartContact.verify</code> method",id:"use-smartcontactverify-method",level:3},{value:"Integrate with testing framework",id:"integrate-with-testing-framework",level:3},{value:"Test a Contract on testnet",id:"test-a-contract-on-testnet",level:2}],u={toc:i};function p(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-test-a-contract"},"How to Test a Contract"),(0,r.kt)("p",null,"Before using your contract code in production, you should always test it carefully, especially because it may cause ",(0,r.kt)("strong",{parentName:"p"},"real economic losses")," if there were bugs or safety issues."),(0,r.kt)("p",null,"There are two different kinds of test recommended for every project using ",(0,r.kt)("inlineCode",{parentName:"p"},"scrypt-ts"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Local Testing")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Testnet Testing"))),(0,r.kt)("h2",{id:"test-a-contract-locally"},"Test a Contract locally"),(0,r.kt)("h3",{id:"use-smartcontactverify-method"},"Use ",(0,r.kt)("inlineCode",{parentName:"h3"},"SmartContact.verify")," method"),(0,r.kt)("p",null,"This method is dedicated to test a contract call."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"instance.verify(entryMethodInvoking: (self: SmartContract) => void): VerifyResult\n")),(0,r.kt)("h3",{id:"integrate-with-testing-framework"},"Integrate with testing framework"),(0,r.kt)("p",null,"You could use whatever testing framework you like to write unit tests for your contract, take ",(0,r.kt)("inlineCode",{parentName:"p"},"mocha")," for example, the local tests may look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"describe('Test SmartContract `Demo`', () => {\n  before(async () => {\n    await Demo.compile();\n  })\n\n  it('should pass the public method unit test successfully.', async () => {\n    let demo = new Demo(1n);\n\n    let result = demo.verify(() => demo.unlock(2n));\n    expect(result.success, result.error).to.eq(true);\n\n    expect(() => {\n      demo.unlock(3n);\n    }).to.throw(/Execution failed/)\n  })\n})\n")),(0,r.kt)("h2",{id:"test-a-contract-on-testnet"},"Test a Contract on testnet"),(0,r.kt)("p",null,"After passing local tests, you'd better test your contract on the ",(0,r.kt)("a",{parentName:"p",href:"https://test.whatsonchain.com/"},"testnet")," of Bitcoin SV."),(0,r.kt)("p",null,"In order to do so, you should meet these requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Get a private key with some amount of BSV tokens on testnet. You could use our ",(0,r.kt)("a",{parentName:"p",href:"https://scrypt.io/#faucet"},"facuet")," to receive test coins.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Get an accessable Bitcoin SV testnet APIs for querying and sending transactions. You could use our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sCrypt-Inc/scrypt-ts-example/blob/master/txHelper.ts"},"tool functions")," in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sCrypt-Inc/scrypt-ts-example"},"example project"),", or build your own. "))),(0,r.kt)("p",null,"Then you could write some tests like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"describe('Test SmartContract `Demo`', () => {\n\n  before(async () => {\n    await Demo.compile();\n  })\n\n  it('should be deployed and called successfully.', async () => {\n    const demo = new Demo(1n, 2n);\n    const balance = 1000;\n\n    // deploy\n    const unsignedDeployTx = await buildDeployTx(demo, balance, false);\n    const deployTx = await signAndSend(unsignedDeployTx);\n    console.log('contract deployed: ', deployTx.id)\n\n    //call\n    const { tx: unsignedCallTx } = buildCallTxAndNextInstance(\n      deployTx, demo, \n      (demoInst: Demo) => {\n        demoInst.add(3n);\n      }\n    );\n\n    const callTx = await signAndSend(unsignedCallTx);\n    console.log('contract called: ', callTx.id)\n  })\n})\n")))}p.isMDXComponent=!0}}]);